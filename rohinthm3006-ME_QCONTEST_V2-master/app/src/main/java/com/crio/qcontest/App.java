/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.qcontest;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Iterator;

import com.crio.qcontest.commands.CommandInvoker;
import com.crio.qcontest.commands.AttendContestCommand;
import com.crio.qcontest.commands.ContestHistoryCommand;
import com.crio.qcontest.commands.CreateContestCommand;
import com.crio.qcontest.commands.CreateQuestionCommand;
import com.crio.qcontest.commands.CreateUserCommand;
import com.crio.qcontest.commands.ListContestsCommand;
import com.crio.qcontest.commands.ListQuestionsCommand;
import com.crio.qcontest.commands.LeaderBoardCommand;
import com.crio.qcontest.commands.RunContestCommand;
import com.crio.qcontest.commands.WithdrawContestCommand;
import com.crio.qcontest.entities.Contest;
import com.crio.qcontest.entities.Contestant;
import com.crio.qcontest.entities.DifficultyLevel;
import com.crio.qcontest.entities.Question;
import com.crio.qcontest.entities.User;
import com.crio.qcontest.repositories.ContestRepository;
import com.crio.qcontest.repositories.ContestantRepository;
import com.crio.qcontest.repositories.IContestRepository;
import com.crio.qcontest.repositories.IContestantRepository;
import com.crio.qcontest.repositories.IQuestionRepository;
import com.crio.qcontest.repositories.IUserRepository;
import com.crio.qcontest.repositories.QuestionRepository;
import com.crio.qcontest.repositories.UserRepository;
import com.crio.qcontest.services.ContestService;
import com.crio.qcontest.services.QuestionService;
import com.crio.qcontest.services.UserService;


public class App {

    // Initialize repositories
    private final IUserRepository userRepository = new UserRepository();
    private final IQuestionRepository questionRepository = new QuestionRepository();
    private final IContestRepository contestRepository = new ContestRepository();
    private final IContestantRepository contestantRepository = new ContestantRepository();
     
    // Initialize services
    private final UserService userService = new UserService(userRepository);
    private final QuestionService questionService = new QuestionService(questionRepository);
    private final ContestService contestService = new ContestService(contestantRepository,contestRepository,questionRepository,userRepository);

    // Initialize commands
    private final CreateUserCommand createUserCommand = new CreateUserCommand(userService);
    private final CreateQuestionCommand createQuestionCommand = new CreateQuestionCommand(questionService);
    private final ListQuestionsCommand  listQuestionCommand = new ListQuestionsCommand(questionService);
    private final CreateContestCommand createContestCommand = new CreateContestCommand(contestService);
    private final ListContestsCommand listContestCommand = new ListContestsCommand(contestService);
    private final AttendContestCommand attendContestCommand = new AttendContestCommand(contestService);
    private final WithdrawContestCommand withdrawContestCommand = new WithdrawContestCommand(contestService);
    private final RunContestCommand runContestCommand = new RunContestCommand(contestService);
    private final ContestHistoryCommand contestHistoryCommand = new ContestHistoryCommand(contestService);
    private final LeaderBoardCommand leaderBoardCommand = new LeaderBoardCommand(userService);

    // Initialize commandInvoker
    private final CommandInvoker commandInvoker = new CommandInvoker();

    // Register commands 
    private void registerCommands(){
        commandInvoker.register("CREATE_USER",createUserCommand);
        commandInvoker.register("CREATE_QUESTION",createQuestionCommand);
        commandInvoker.register("LIST_QUESTIONS",listQuestionCommand);
        commandInvoker.register("CREATE_CONTEST",createContestCommand);
        commandInvoker.register("LIST_CONTEST",listContestCommand);
        commandInvoker.register("ATTEND_CONTEST",attendContestCommand);
        commandInvoker.register("WITHDRAW_CONTEST",withdrawContestCommand);
        commandInvoker.register("RUN_CONTESTD",runContestCommand);
        commandInvoker.register("CONTEST_HISTORY",contestHistoryCommand);
        commandInvoker.register("LEADERBOARD",leaderBoardCommand);
    }


    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1){
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }        

        // OR
        // Test your code by ading commands in this list
        List<String> inplace_commands = new LinkedList<>(){
            {
            }
        };

        new App().run(inplace_commands);
 
    }

    public void run(List<String> commands){

        registerCommands();
        Iterator<String> it = commands.iterator();
        while(it.hasNext()){
            String line = it.next();
                if(line == null){
                    break;
                }
                
                try {
                commandInvoker.invoke(line);
                } catch (Exception e) {
                    System.out.println("ERROR: " + e.getMessage());
                }
        }
    }

	

	
}